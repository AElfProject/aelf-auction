/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/AElf.Contracts.CallerContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/AElf.Contracts.CallerContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "AElf.Contracts.CallerContract";

// the contract definition: a gRPC service definition.
service CallerContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "AElf.Contracts.CallerContract.CallerContractState";

    // an action defined as a gRPC service method.
    // this action take a google.protobuf.Empty (placeholder for void) as input
    // and returns a custom defined type: HelloReturn.
    rpc Hello (google.protobuf.Empty) returns (HelloReturn) {
    }

    rpc Create (google.protobuf.Empty) returns (aelf.Hash) {

    }

    rpc Initialize (InitializeDto) returns (google.protobuf.Empty) {

    }

    rpc __callback_auction (AuctionNotification) returns (google.protobuf.Empty) {

    }
}

message AuctionNotification {
    aelf.Hash auction_id = 1;
    aelf.Address winner = 2;
}

message InitializeDto {
    aelf.Address auction_contract_address = 1;
}

// a custom message, used as the return type of the Hello action
message HelloReturn {
    string Value = 1;
}

message Product {
    aelf.Address owner = 1;
    aelf.Hash auction_id = 2;
}

message CallbackEvent {
    option (aelf.is_event) = true;
    aelf.Hash auction_id = 1 [(aelf.is_indexed) = true];
}